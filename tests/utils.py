"""
Utility functions for tests.
Regenerate the comparison files only when changing the precision of the models.
"""
import copy
import os

import matplotlib.pyplot as plt
import numpy as np

from .context import petitRADTRANS

version = "2.3.2"  # petitRADTRANS.version.version

tests_data_directory = os.path.join(os.path.dirname(__file__), 'data')
reference_filenames = {
    'config_test_radtrans':
        'config_test_radtrans',
    'guillot_2010':
        'radtrans_guillot_2010_temperature_profile_ref',
    'correlated_k_transmission':
        'radtrans_correlated_k_transmission_ref',
    'correlated_k_transmission_cloud_power_law':
        'radtrans_correlated_k_transmission_cloud_power_law_ref',
    'correlated_k_transmission_gray_cloud':
        'radtrans_correlated_k_transmission_gray_cloud_ref',
    'correlated_k_transmission_rayleigh':
        'radtrans_correlated_k_transmission_rayleigh_ref',
    'correlated_k_transmission_cloud_fixed_radius':
        'radtrans_correlated_k_transmission_cloud_fixed_radius_ref',
    'correlated_k_transmission_cloud_calculated_radius':
        'radtrans_correlated_k_transmission_cloud_calculated_radius_ref',
    'correlated_k_emission':
        'radtrans_correlated_k_emission_ref',
    'correlated_k_emission_cloud_hansen_radius':
        'radtrans_correlated_k_emission_cloud_hansen_radius_ref',
    'line_by_line_transmission':
        'radtrans_line_by_line_transmission_ref',
    'line_by_line_emission':
        'radtrans_line_by_line_emission_ref'
}

# Complete filenames
reference_filenames = {
    key: os.path.join(tests_data_directory, value + '.npz') for key, value in reference_filenames.items()
}


# Common parameters
def create_test_radtrans_config_file(filename):
    _pressures = np.logspace(-6, 2, 27)  # (bar) pressure array used for all tests

    np.savez_compressed(
        os.path.join(filename),
        pressures=_pressures,
        mass_fractions={
            'H2': 0.74 * np.ones_like(_pressures),
            'He': 0.24 * np.ones_like(_pressures),
            'H2O_HITEMP': 0.001 * np.ones_like(_pressures),
            'H2O_main_iso': 0.001 * np.ones_like(_pressures),
            'CH4': 0.001 * np.ones_like(_pressures),
            'CO_all_iso': 0.1 * np.ones_like(_pressures),
            'Mg2SiO4(c)': np.zeros_like(_pressures)
        },
        mean_molar_mass=2.33 * np.ones_like(_pressures),  # (g.cm-3)
        temperature_isothermal=1200,  # (K)
        temperature_guillot_2010_parameters={
            'kappa_ir': 0.01,
            'gamma': 0.4,
            'intrinsic_temperature': 200,  # (K)
            'equilibrium_temperature': 1500  # (K)
        },
        planetary_parameters={
            'reference_pressure': 0.01,  # (bar)
            'radius': 1.838,  # (R_jup)
            'surface_gravity': 1e1 ** 2.45,  # (cm.s-2)
            'eddy_diffusion_coefficient': 10 ** 7.5 * np.ones_like(_pressures)
        },
        spectrum_parameters={
            'line_species_correlated_k': [
                'H2O_HITEMP',
                'CH4'
            ],
            'line_species_line_by_line': [
                'H2O_main_iso',
                'CO_all_iso'
            ],
            'rayleigh_species': ['H2', 'He'],
            'continuum_opacities': ['H2-H2', 'H2-He'],
            'wavelength_range_correlated_k': [0.9, 1.2],
            'wavelength_range_line_by_line': [2.3000, 2.3025],
        },
        cloud_parameters={
            'kappa_zero': 0.01,
            'gamma_scattering': -4,
            'cloud_pressure': 0.01,
            'haze_factor': 10,
            'cloud_species': {
                'Mg2SiO4(c)_cd': {
                    'mass_fraction': 5e-7,
                    'radius': 5e-5,  # (cm)
                    'f_sed': 2,
                    'sigma_log_normal': 1.05,
                    'b_hansen': 0.01
                },
            }
        },
        header=f'File generated by tests.utils function\n'
               f'wavelength units: um\n'
               f'pressure units: bar\n'
               f'planet radius units: R_jup\n'
               f'other units: cgs',
        prt_version=f'{version}'
    )


def init_radtrans_parameters(recreate_parameter_file=False):
    """
    Initialize various parameters used both to perform the tests and generate the reference files.
    Do not change these parameters when comparing with a previous version.
    """
    if not os.path.isfile(reference_filenames['config_test_radtrans']) or recreate_parameter_file:
        print('Generating Radtrans test parameters file...')
        create_test_radtrans_config_file(filename=reference_filenames['config_test_radtrans'])

    parameters = np.load(reference_filenames['config_test_radtrans'], allow_pickle=True)

    return parameters


radtrans_parameters = init_radtrans_parameters()


# Useful functions
def __save_emission_spectrum(filename, atmosphere, plot_figure=False, figure_title=None):
    wavelength = np.asarray(petitRADTRANS.nat_cst.c / atmosphere.freq * 1e4)

    np.savez_compressed(
        os.path.join(filename),
        wavelength=wavelength,
        spectral_radiosity=np.asarray(atmosphere.flux),
        header=f'File generated by tests.utils function\n'
               f'wavelength units: um\n'
               f'spectral radiosity units: erg.cm-2.s-1.Hz-1',
        prt_version=f'{version}'
    )

    if plot_figure:
        plt.figure()
        plt.semilogx(wavelength, atmosphere.flux)
        plt.xlabel(r'Wavelength ($\mu$m)')
        plt.ylabel(r'Spectral radiosity (erg$\cdot$s$^{-1}\cdot$cm$^{-2}\cdot$Hz$^{-1}$)')
        plt.title(figure_title)


def __save_temperature_profile(filename, temperature, plot_figure=False, figure_title=None):
    np.savez_compressed(
        os.path.join(filename),
        temperature=np.asarray(temperature),
        pressure=np.asarray(radtrans_parameters['pressures']),
        header=f'File generated by tests.utils function\n'
               f'temperature units: K\n'
               f'pressure units: bar',
        prt_version=f'{version}'
    )

    if plot_figure:
        plt.figure()
        plt.semilogy(temperature, radtrans_parameters['pressures'])
        plt.ylim([1e2, 1e-6])
        plt.xlabel('Temperature (K)')
        plt.ylabel('Pressure (bar)')
        plt.title(figure_title)


def __save_transmission_spectrum(filename, atmosphere, plot_figure=False, figure_title=None):
    wavelength = np.asarray(petitRADTRANS.nat_cst.c / atmosphere.freq * 1e4)
    transit_radius = np.asarray(atmosphere.transm_rad / petitRADTRANS.nat_cst.r_jup_mean)

    np.savez_compressed(
        os.path.join(filename),
        wavelength=wavelength,
        transit_radius=transit_radius,
        header=f'File generated by tests.utils.create_radtrans_correlated_k_transmission_spectrum_ref\n'
               f'wavelength units: um\n'
               f'transit_radius units: R_jup',
        prt_version=f'{version}'
    )

    if plot_figure:
        plt.figure()
        plt.semilogx(wavelength, transit_radius)
        plt.xlabel(r'Wavelength ($\mu$m)')
        plt.ylabel(r'Transit radius (R$_{\rm{Jup}}$)')
        plt.title(figure_title)


# Useful functions
def check_cloud_mass_fractions():
    """
    Check if cloud mass fraction is set to 0 by default.
    This is necessary to correctly assess the effect of the different clear and cloud models.
    """
    for species, mmr in radtrans_parameters['mass_fractions'][()].items():
        if '(c)' in species or '(l)' in species or '(s)' in species or '(cr)' in species:  # condensed species
            if not np.all(mmr == 0):
                raise ValueError(
                    f"cloud {species} has a default mass fraction different of 0, cannot perform test\n"
                    f"mass fraction was: {mmr}"
                )


def compare_from_reference_file(reference_file, comparison_dict, relative_tolerance):
    reference_data = np.load(reference_file)
    print(f"Comparing generated spectrum to result from petitRADTRANS-{reference_data['prt_version']}...")

    for reference_file_key in comparison_dict:
        assert np.allclose(
            comparison_dict[reference_file_key],
            reference_data[reference_file_key],
            rtol=relative_tolerance,
            atol=0
        )


# Initializations
def init_guillot_2010_temperature_profile():
    temperature_guillot = petitRADTRANS.nat_cst.guillot_global(
        pressure=radtrans_parameters['pressures'],
        kappa_ir=radtrans_parameters['temperature_guillot_2010_parameters'][()]['kappa_ir'],
        gamma=radtrans_parameters['temperature_guillot_2010_parameters'][()]['gamma'],
        grav=radtrans_parameters['planetary_parameters'][()]['surface_gravity'],
        t_int=radtrans_parameters['temperature_guillot_2010_parameters'][()]['intrinsic_temperature'],
        t_equ=radtrans_parameters['temperature_guillot_2010_parameters'][()]['equilibrium_temperature']
    )

    return temperature_guillot


def init_radtrans_test():
    check_cloud_mass_fractions()

    tp_iso = radtrans_parameters['temperature_isothermal'] * np.ones_like(radtrans_parameters['pressures'])
    tp_guillot_2010 = init_guillot_2010_temperature_profile()

    return tp_iso, tp_guillot_2010


temperature_isothermal, temperature_guillot_2010 = init_radtrans_test()


# Data files generation functions
def create_guillot_2010_temperature_profile_ref(plot_figure=False):
    temperature_guillot = petitRADTRANS.nat_cst.guillot_global(
        pressure=radtrans_parameters['pressures'],
        kappa_ir=radtrans_parameters['temperature_guillot_2010_parameters'][()]['kappa_ir'],
        gamma=radtrans_parameters['temperature_guillot_2010_parameters'][()]['gamma'],
        grav=radtrans_parameters['planetary_parameters'][()]['surface_gravity'],
        t_int=radtrans_parameters['temperature_guillot_2010_parameters'][()]['intrinsic_temperature'],
        t_equ=radtrans_parameters['temperature_guillot_2010_parameters'][()]['equilibrium_temperature']
    )

    __save_temperature_profile(
        reference_filenames['guillot_2010'], temperature_guillot, plot_figure, 'Guillot 2010 temperature profile'
    )


def create_radtrans_correlated_k_emission_spectrum_ref(plot_figure=False):
    from .test_radtrans_correlated_k import atmosphere_ck, temperature_guillot_2010

    atmosphere_ck.calc_flux(
        temp=temperature_guillot_2010,
        abunds=radtrans_parameters['mass_fractions'][()],
        gravity=radtrans_parameters['planetary_parameters'][()]['surface_gravity'],
        mmw=radtrans_parameters['mean_molar_mass'],
    )

    __save_emission_spectrum(
        reference_filenames['correlated_k_emission'], atmosphere_ck, plot_figure, 'Correlated-k emission spectrum'
    )


def create_radtrans_correlated_k_emission_spectrum_cloud_hansen_radius_ref(plot_figure=False):
    from .test_radtrans_correlated_k import atmosphere_ck

    mass_fractions = copy.deepcopy(radtrans_parameters['mass_fractions'][()])
    mass_fractions['Mg2SiO4(c)'] = \
        radtrans_parameters['cloud_parameters'][()]['cloud_species']['Mg2SiO4(c)_cd']['mass_fraction']

    atmosphere_ck.calc_flux(
        temp=radtrans_parameters['temperature_isothermal'] * np.ones_like(radtrans_parameters['pressures']),
        abunds=mass_fractions,
        gravity=radtrans_parameters['planetary_parameters'][()]['surface_gravity'],
        mmw=radtrans_parameters['mean_molar_mass'],
        Kzz=radtrans_parameters['planetary_parameters'][()]['eddy_diffusion_coefficient'],
        fsed=radtrans_parameters['cloud_parameters'][()]['cloud_species']['Mg2SiO4(c)_cd']['f_sed'],
        b_hans=radtrans_parameters['cloud_parameters'][()]['cloud_species']['Mg2SiO4(c)_cd']['b_hansen'],
        dist='hansen'
    )

    __save_emission_spectrum(
        reference_filenames['correlated_k_emission_cloud_hansen_radius'], atmosphere_ck, plot_figure,
        'Correlated-k emission spectrum, with non-gray cloud using Hansen radius'
    )


def create_radtrans_correlated_k_transmission_spectrum_ref(plot_figure=False):
    from .test_radtrans_correlated_k import atmosphere_ck

    atmosphere_ck.calc_transm(
        temp=radtrans_parameters['temperature_isothermal'] * np.ones_like(radtrans_parameters['pressures']),
        abunds=radtrans_parameters['mass_fractions'][()],
        gravity=radtrans_parameters['planetary_parameters'][()]['surface_gravity'],
        mmw=radtrans_parameters['mean_molar_mass'],
        R_pl=radtrans_parameters['planetary_parameters'][()]['radius'] * petitRADTRANS.nat_cst.r_jup_mean,
        P0_bar=radtrans_parameters['planetary_parameters'][()]['reference_pressure']
    )

    __save_transmission_spectrum(
        reference_filenames['correlated_k_transmission'], atmosphere_ck, plot_figure,
        'Correlated-k transmission spectrum'
    )


def create_radtrans_correlated_k_transmission_spectrum_cloud_power_law_ref(plot_figure=False):
    from .test_radtrans_correlated_k import atmosphere_ck

    atmosphere_ck.calc_transm(
        temp=radtrans_parameters['temperature_isothermal'] * np.ones_like(radtrans_parameters['pressures']),
        abunds=radtrans_parameters['mass_fractions'][()],
        gravity=radtrans_parameters['planetary_parameters'][()]['surface_gravity'],
        mmw=radtrans_parameters['mean_molar_mass'],
        R_pl=radtrans_parameters['planetary_parameters'][()]['radius'] * petitRADTRANS.nat_cst.r_jup_mean,
        P0_bar=radtrans_parameters['planetary_parameters'][()]['reference_pressure'],
        kappa_zero=radtrans_parameters['cloud_parameters'][()]['kappa_zero'],
        gamma_scat=radtrans_parameters['cloud_parameters'][()]['gamma_scattering']
    )

    __save_transmission_spectrum(
        reference_filenames['correlated_k_transmission_cloud_power_law'],
        atmosphere_ck, plot_figure, 'Correlated-k transmission spectrum, with power law cloud'
    )


def create_radtrans_correlated_k_transmission_spectrum_gray_cloud_ref(plot_figure=False):
    from .test_radtrans_correlated_k import atmosphere_ck

    atmosphere_ck.calc_transm(
        temp=radtrans_parameters['temperature_isothermal'] * np.ones_like(radtrans_parameters['pressures']),
        abunds=radtrans_parameters['mass_fractions'][()],
        gravity=radtrans_parameters['planetary_parameters'][()]['surface_gravity'],
        mmw=radtrans_parameters['mean_molar_mass'],
        R_pl=radtrans_parameters['planetary_parameters'][()]['radius'] * petitRADTRANS.nat_cst.r_jup_mean,
        P0_bar=radtrans_parameters['planetary_parameters'][()]['reference_pressure'],
        Pcloud=radtrans_parameters['cloud_parameters'][()]['cloud_pressure']
    )

    __save_transmission_spectrum(
        reference_filenames['correlated_k_transmission_gray_cloud'],
        atmosphere_ck, plot_figure, 'Correlated-k transmission spectrum, with gray cloud'
    )


def create_radtrans_correlated_k_transmission_spectrum_rayleigh_ref(plot_figure=False):
    from .test_radtrans_correlated_k import atmosphere_ck

    atmosphere_ck.calc_transm(
        temp=radtrans_parameters['temperature_isothermal'] * np.ones_like(radtrans_parameters['pressures']),
        abunds=radtrans_parameters['mass_fractions'][()],
        gravity=radtrans_parameters['planetary_parameters'][()]['surface_gravity'],
        mmw=radtrans_parameters['mean_molar_mass'],
        R_pl=radtrans_parameters['planetary_parameters'][()]['radius'] * petitRADTRANS.nat_cst.r_jup_mean,
        P0_bar=radtrans_parameters['planetary_parameters'][()]['reference_pressure'],
        haze_factor=radtrans_parameters['cloud_parameters'][()]['haze_factor']
    )

    __save_transmission_spectrum(
        reference_filenames['correlated_k_transmission_rayleigh'],
        atmosphere_ck, plot_figure, 'Correlated-k transmission spectrum, with hazes'
    )


def create_radtrans_correlated_k_transmission_spectrum_cloud_fixed_radius_ref(plot_figure=False):
    from .test_radtrans_correlated_k import atmosphere_ck

    mass_fractions = copy.deepcopy(radtrans_parameters['mass_fractions'][()])
    mass_fractions['Mg2SiO4(c)'] = \
        radtrans_parameters['cloud_parameters'][()]['cloud_species']['Mg2SiO4(c)_cd']['mass_fraction']

    atmosphere_ck.calc_transm(
        temp=radtrans_parameters['temperature_isothermal'] * np.ones_like(radtrans_parameters['pressures']),
        abunds=mass_fractions,
        gravity=radtrans_parameters['planetary_parameters'][()]['surface_gravity'],
        mmw=radtrans_parameters['mean_molar_mass'],
        R_pl=radtrans_parameters['planetary_parameters'][()]['radius'] * petitRADTRANS.nat_cst.r_jup_mean,
        P0_bar=radtrans_parameters['planetary_parameters'][()]['reference_pressure'],
        radius={'Mg2SiO4(c)': radtrans_parameters['cloud_parameters'][()]['cloud_species']['Mg2SiO4(c)_cd']['radius']},
        sigma_lnorm=radtrans_parameters['cloud_parameters'][()]['cloud_species']['Mg2SiO4(c)_cd']['sigma_log_normal']
    )

    __save_transmission_spectrum(
        reference_filenames['correlated_k_transmission_cloud_fixed_radius'], atmosphere_ck, plot_figure,
        'Correlated-k transmission spectrum, with non-gray cloud using fixed radius'
    )


def create_radtrans_correlated_k_transmission_spectrum_cloud_calculated_radius_ref(plot_figure=False):
    from .test_radtrans_correlated_k import atmosphere_ck

    mass_fractions = copy.deepcopy(radtrans_parameters['mass_fractions'][()])
    mass_fractions['Mg2SiO4(c)'] = \
        radtrans_parameters['cloud_parameters'][()]['cloud_species']['Mg2SiO4(c)_cd']['mass_fraction']

    atmosphere_ck.calc_transm(
        temp=radtrans_parameters['temperature_isothermal'] * np.ones_like(radtrans_parameters['pressures']),
        abunds=mass_fractions,
        gravity=radtrans_parameters['planetary_parameters'][()]['surface_gravity'],
        mmw=radtrans_parameters['mean_molar_mass'],
        R_pl=radtrans_parameters['planetary_parameters'][()]['radius'] * petitRADTRANS.nat_cst.r_jup_mean,
        P0_bar=radtrans_parameters['planetary_parameters'][()]['reference_pressure'],
        Kzz=radtrans_parameters['planetary_parameters'][()]['eddy_diffusion_coefficient'],
        fsed=radtrans_parameters['cloud_parameters'][()]['cloud_species']['Mg2SiO4(c)_cd']['f_sed'],
        sigma_lnorm=radtrans_parameters['cloud_parameters'][()]['cloud_species']['Mg2SiO4(c)_cd']['sigma_log_normal']
    )

    __save_transmission_spectrum(
        reference_filenames['correlated_k_transmission_cloud_calculated_radius'], atmosphere_ck, plot_figure,
        'Correlated-k transmission spectrum, with non-gray cloud using calculated radius'
    )


def create_radtrans_line_by_line_emission_spectrum_ref(plot_figure=False):
    from .test_radtrans_line_by_line import atmosphere_lbl, temperature_guillot_2010

    atmosphere_lbl.calc_flux(
        temp=temperature_guillot_2010,
        abunds=radtrans_parameters['mass_fractions'][()],
        gravity=radtrans_parameters['planetary_parameters'][()]['surface_gravity'],
        mmw=radtrans_parameters['mean_molar_mass'],
    )

    __save_emission_spectrum(
        reference_filenames['line_by_line_emission'],
        atmosphere_lbl, plot_figure, 'Line-by-line emission spectrum'
    )


def create_radtrans_line_by_line_transmission_spectrum_ref(plot_figure=False):
    from .test_radtrans_line_by_line import atmosphere_lbl

    atmosphere_lbl.calc_transm(
        temp=radtrans_parameters['temperature_isothermal'] * np.ones_like(radtrans_parameters['pressures']),
        abunds=radtrans_parameters['mass_fractions'][()],
        gravity=radtrans_parameters['planetary_parameters'][()]['surface_gravity'],
        mmw=radtrans_parameters['mean_molar_mass'],
        R_pl=radtrans_parameters['planetary_parameters'][()]['radius'] * petitRADTRANS.nat_cst.r_jup_mean,
        P0_bar=radtrans_parameters['planetary_parameters'][()]['reference_pressure']
    )

    __save_transmission_spectrum(
        reference_filenames['line_by_line_transmission'],
        atmosphere_lbl, plot_figure, 'Line-by-line transmission spectrum'
    )


def create_all_comparison_files(plot_figure=False):
    create_guillot_2010_temperature_profile_ref(plot_figure)
    create_radtrans_correlated_k_emission_spectrum_ref(plot_figure)
    create_radtrans_correlated_k_transmission_spectrum_ref(plot_figure)
    create_radtrans_correlated_k_transmission_spectrum_cloud_power_law_ref(plot_figure)
    create_radtrans_correlated_k_transmission_spectrum_rayleigh_ref(plot_figure)
    create_radtrans_correlated_k_transmission_spectrum_gray_cloud_ref(plot_figure)
    create_radtrans_correlated_k_transmission_spectrum_cloud_fixed_radius_ref(plot_figure)
    create_radtrans_correlated_k_transmission_spectrum_cloud_calculated_radius_ref(plot_figure)
    create_radtrans_line_by_line_emission_spectrum_ref(plot_figure)
    create_radtrans_line_by_line_transmission_spectrum_ref(plot_figure)
