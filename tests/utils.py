"""
Utility functions for tests.
Regenerate the comparison files only when changing the precision of the models.
"""
import os

import matplotlib.pyplot as plt
import numpy as np

from .context import petitRADTRANS

version = "2.3.2"  # petitRADTRANS.version.version

tests_data_directory = os.path.join(os.path.dirname(__file__), 'data')
reference_filenames = {
    'guillot_2010': 'radtrans_guillot_2010_temperature_profile_ref',
    'correlated_k_transmission': 'radtrans_correlated_k_transmission_ref',
    'correlated_k_transmission_cloud_power_law': 'radtrans_correlated_k_transmission_cloud_power_law_ref',
    'correlated_k_transmission_gray_cloud': 'radtrans_correlated_k_transmission_gray_cloud_ref',
    'correlated_k_transmission_rayleigh': 'radtrans_correlated_k_transmission_rayleigh_ref',
    'correlated_k_emission': 'radtrans_correlated_k_emission_ref',
    'line_by_line_transmission': 'radtrans_line_by_line_transmission_ref',
    'line_by_line_emission': 'radtrans_line_by_line_emission_ref'
}

# Complete filenames
reference_filenames = {
    key: os.path.join(tests_data_directory, value + '.npz') for key, value in reference_filenames.items()
}


# Common parameters
def init_radtrans_parameters():
    """
    Initialize various parameters used both to perform the tests and generate the reference files.
    Do not change these parameters when comparing with a previous version.
    """
    _pressures = np.logspace(-6, 2, 27)  # pressure array used for all tests

    # Temperature and mass fractions
    _mass_fractions = {
        'H2': 0.74 * np.ones_like(_pressures),
        'He': 0.24 * np.ones_like(_pressures),
        'H2O_HITEMP': 0.001 * np.ones_like(_pressures),
        'H2O_main_iso': 0.001 * np.ones_like(_pressures),
        'CH4': 0.001 * np.ones_like(_pressures),
        'CO_all_iso': 0.1 * np.ones_like(_pressures),
    }

    _mean_molar_mass = 2.33 * np.ones_like(_pressures)  # (g.cm-3)

    _temperature_iso = 1200  # (K)
    _temperature_guillot_2010_parameters = {
        'kappa_ir': 0.01,
        'gamma': 0.4,
        'intrinsic_temperature': 200,  # (K)
        'equilibrium_temperature': 1500  # (K)
    }

    # Planetary parameters
    _planetary_parameters = {
        'reference_pressure': 0.01,  # (bar)
        'radius': 1.838,  # (R_jup)
        'surface_gravity': 1e1 ** 2.45,  # (cm.s-2)
    }

    # Spectrum parameters
    _spectrum_parameters = {
        'line_species_correlated_k': [
            'H2O_HITEMP',
            'CH4'
        ],
        'line_species_line_by_line': [
            'H2O_main_iso',
            'CO_all_iso'
        ],
        'rayleigh_species': ['H2', 'He'],
        'continuum_opacities': ['H2-H2', 'H2-He'],
        'wavelength_range_correlated_k': [0.9, 1.2],
        'wavelength_range_line_by_line': [2.3000, 2.3025],
    }

    # Cloud parameters
    _cloud_parameters = {
        'kappa_zero': 0.01,
        'gamma_scattering': -4,
        'cloud_pressure': 0.01,
        'haze_factor': 10,
        'cloud_species': ['Mg2SiO4(c)_cd']
    }

    return _pressures, _mass_fractions, _mean_molar_mass, _temperature_iso, _temperature_guillot_2010_parameters, \
        _planetary_parameters, _spectrum_parameters, _cloud_parameters


pressures, mass_fractions, mean_molar_mass, temperature_isothermal, temperature_guillot_2010_parameters, \
    planetary_parameters, spectrum_parameters, cloud_parameters = init_radtrans_parameters()


# Useful functions
def __save_emission_spectrum(filename, atmosphere, plot_figure=False, figure_title=None):
    wavelength = np.asarray(petitRADTRANS.nat_cst.c / atmosphere.freq * 1e4)

    np.savez_compressed(
        os.path.join(filename),
        wavelength=wavelength,
        spectral_radiosity=np.asarray(atmosphere.flux),
        header=f'File generated by tests.utils function\n'
               f'wavelength units: um\n'
               f'spectral radiosity units: erg.cm-2.s-1.Hz-1',
        prt_version=f'{version}'
    )

    if plot_figure:
        plt.figure()
        plt.semilogx(wavelength, atmosphere.flux)
        plt.xlabel(r'Wavelength ($\mu$m)')
        plt.ylabel(r'Spectral radiosity (erg$\cdot$s$^{-1}\cdot$cm$^{-2}\cdot$Hz$^{-1}$)')
        plt.title(figure_title)


def __save_temperature_profile(filename, temperature, plot_figure=False, figure_title=None):
    np.savez_compressed(
        os.path.join(filename),
        temperature=np.asarray(temperature),
        pressure=np.asarray(pressures),
        header=f'File generated by tests.utils function\n'
               f'temperature units: K\n'
               f'pressure units: bar',
        prt_version=f'{version}'
    )

    if plot_figure:
        plt.figure()
        plt.semilogy(temperature, pressures)
        plt.ylim([1e2, 1e-6])
        plt.xlabel('Temperature (K)')
        plt.ylabel('Pressure (bar)')
        plt.title(figure_title)


def __save_transmission_spectrum(filename, atmosphere, plot_figure=False, figure_title=None):
    wavelength = np.asarray(petitRADTRANS.nat_cst.c / atmosphere.freq * 1e4)
    transit_radius = np.asarray(atmosphere.transm_rad / petitRADTRANS.nat_cst.r_jup_mean)

    np.savez_compressed(
        os.path.join(filename),
        wavelength=wavelength,
        transit_radius=transit_radius,
        header=f'File generated by tests.utils.create_radtrans_correlated_k_transmission_spectrum_ref\n'
               f'wavelength units: um\n'
               f'transit_radius units: R_jup',
        prt_version=f'{version}'
    )

    if plot_figure:
        plt.figure()
        plt.semilogx(wavelength, transit_radius)
        plt.xlabel(r'Wavelength ($\mu$m)')
        plt.ylabel(r'Transit radius (R$_{\rm{Jup}}$)')
        plt.title(figure_title)


# Data files generation functions
def create_guillot_2010_temperature_profile_ref(plot_figure=False):
    temperature_guillot = petitRADTRANS.nat_cst.guillot_global(
        pressure=pressures,
        kappa_ir=temperature_guillot_2010_parameters['kappa_ir'],
        gamma=temperature_guillot_2010_parameters['gamma'],
        grav=planetary_parameters['surface_gravity'],
        t_int=temperature_guillot_2010_parameters['intrinsic_temperature'],
        t_equ=temperature_guillot_2010_parameters['equilibrium_temperature']
    )

    __save_temperature_profile(
        reference_filenames['guillot_2010'], temperature_guillot, plot_figure, 'Guillot 2010 temperature profile'
    )


def create_radtrans_correlated_k_emission_spectrum_ref(plot_figure=False):
    from .test_radtrans import atmosphere_ck, temperature_guillot_2010

    atmosphere_ck.calc_flux(
        temp=temperature_guillot_2010,
        abunds=mass_fractions,
        gravity=planetary_parameters['surface_gravity'],
        mmw=mean_molar_mass,
    )

    __save_emission_spectrum(
        reference_filenames['correlated_k_emission'], atmosphere_ck, plot_figure, 'Correlated-k emission spectrum'
    )


def create_radtrans_correlated_k_transmission_spectrum_ref(plot_figure=False):
    from .test_radtrans import atmosphere_ck

    atmosphere_ck.calc_transm(
        temp=temperature_isothermal * np.ones_like(pressures),
        abunds=mass_fractions,
        gravity=planetary_parameters['surface_gravity'],
        mmw=mean_molar_mass,
        R_pl=planetary_parameters['radius'] * petitRADTRANS.nat_cst.r_jup_mean,
        P0_bar=planetary_parameters['reference_pressure']
    )

    __save_transmission_spectrum(
        reference_filenames['correlated_k_transmission'], atmosphere_ck, plot_figure,
        'Correlated-k transmission spectrum'
    )


def create_radtrans_correlated_k_transmission_spectrum_cloud_power_law_ref(plot_figure=False):
    from .test_radtrans import atmosphere_ck

    atmosphere_ck.calc_transm(
        temp=temperature_isothermal * np.ones_like(pressures),
        abunds=mass_fractions,
        gravity=planetary_parameters['surface_gravity'],
        mmw=mean_molar_mass,
        R_pl=planetary_parameters['radius'] * petitRADTRANS.nat_cst.r_jup_mean,
        P0_bar=planetary_parameters['reference_pressure'],
        kappa_zero=cloud_parameters['kappa_zero'],
        gamma_scat=cloud_parameters['gamma_scattering']
    )

    __save_transmission_spectrum(
        reference_filenames['correlated_k_transmission_cloud_power_law'],
        atmosphere_ck, plot_figure, 'Correlated-k transmission spectrum, with power law cloud'
    )


def create_radtrans_correlated_k_transmission_spectrum_gray_cloud_ref(plot_figure=False):
    from .test_radtrans import atmosphere_ck

    atmosphere_ck.calc_transm(
        temp=temperature_isothermal * np.ones_like(pressures),
        abunds=mass_fractions,
        gravity=planetary_parameters['surface_gravity'],
        mmw=mean_molar_mass,
        R_pl=planetary_parameters['radius'] * petitRADTRANS.nat_cst.r_jup_mean,
        P0_bar=planetary_parameters['reference_pressure'],
        Pcloud=cloud_parameters['cloud_pressure']
    )

    __save_transmission_spectrum(
        reference_filenames['correlated_k_transmission_gray_cloud'],
        atmosphere_ck, plot_figure, 'Correlated-k transmission spectrum, with gray cloud'
    )


def create_radtrans_correlated_k_transmission_spectrum_rayleigh_ref(plot_figure=False):
    from .test_radtrans import atmosphere_ck

    atmosphere_ck.calc_transm(
        temp=temperature_isothermal * np.ones_like(pressures),
        abunds=mass_fractions,
        gravity=planetary_parameters['surface_gravity'],
        mmw=mean_molar_mass,
        R_pl=planetary_parameters['radius'] * petitRADTRANS.nat_cst.r_jup_mean,
        P0_bar=planetary_parameters['reference_pressure'],
        haze_factor=cloud_parameters['haze_factor']
    )

    __save_transmission_spectrum(
        reference_filenames['correlated_k_transmission_rayleigh'],
        atmosphere_ck, plot_figure, 'Correlated-k transmission spectrum, with hazes'
    )


def create_radtrans_line_by_line_emission_spectrum_ref(plot_figure=False):
    from .test_radtrans import atmosphere_lbl, temperature_guillot_2010

    atmosphere_lbl.calc_flux(
        temp=temperature_guillot_2010,
        abunds=mass_fractions,
        gravity=planetary_parameters['surface_gravity'],
        mmw=mean_molar_mass,
    )

    __save_emission_spectrum(
        reference_filenames['line_by_line_emission'],
        atmosphere_lbl, plot_figure, 'Line-by-line emission spectrum'
    )


def create_radtrans_line_by_line_transmission_spectrum_ref(plot_figure=False):
    from .test_radtrans import atmosphere_lbl

    atmosphere_lbl.calc_transm(
        temp=temperature_isothermal * np.ones_like(pressures),
        abunds=mass_fractions,
        gravity=planetary_parameters['surface_gravity'],
        mmw=mean_molar_mass,
        R_pl=planetary_parameters['radius'] * petitRADTRANS.nat_cst.r_jup_mean,
        P0_bar=planetary_parameters['reference_pressure']
    )

    __save_transmission_spectrum(
        reference_filenames['line_by_line_transmission'],
        atmosphere_lbl, plot_figure, 'Line-by-line transmission spectrum'
    )


def create_all_comparison_files(plot_figure=False):
    create_guillot_2010_temperature_profile_ref(plot_figure)
    create_radtrans_correlated_k_emission_spectrum_ref(plot_figure)
    create_radtrans_correlated_k_transmission_spectrum_ref(plot_figure)
    create_radtrans_correlated_k_transmission_spectrum_cloud_power_law_ref(plot_figure)
    create_radtrans_correlated_k_transmission_spectrum_rayleigh_ref(plot_figure)
    create_radtrans_correlated_k_transmission_spectrum_gray_cloud_ref(plot_figure)
    create_radtrans_line_by_line_emission_spectrum_ref(plot_figure)
    create_radtrans_line_by_line_transmission_spectrum_ref(plot_figure)
