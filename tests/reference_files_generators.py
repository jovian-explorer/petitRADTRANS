"""
Functions to generate the reference files
"""
import copy
import os

import matplotlib.pyplot as plt
import numpy as np

from .context import petitRADTRANS
from .utils import radtrans_parameters, reference_filenames, temperature_guillot_2010, version


# Save functions
def __save_contribution_function(filename, atmosphere, mode='emission', plot_figure=False, figure_title=None,
                                 prt_version=version):
    wavelength = np.asarray(petitRADTRANS.nat_cst.c / atmosphere.freq * 1e4)

    if mode == 'emission':
        contribution = np.asarray(atmosphere.contr_em)
    elif mode == 'transmission':
        contribution = np.asarray(atmosphere.contr_tr)
    else:
        raise ValueError(f"unknown contribution mode '{mode}', available modes are 'emission' or 'transmission'")

    np.savez_compressed(
        os.path.join(filename),
        wavelength=wavelength,
        contribution=contribution,
        header=f'File generated by tests.utils function\n'
               f'wavelength units: um\n'
               f'spectral radiosity units: erg.cm-2.s-1.Hz-1',
        prt_version=f'{prt_version}'
    )

    if plot_figure:
        plt.figure()
        x, y = np.meshgrid(wavelength, atmosphere.press * 1e-6)
        plt.contourf(x, y, contribution, 30, cmap='bone_r')

        plt.yscale('log')
        plt.xscale('log')
        plt.ylim([1e2, 1e-6])
        plt.xlim([np.min(wavelength), np.max(wavelength)])

        plt.xlabel(r'Wavelength ($\mu$m)')
        plt.ylabel(r'Pressure (bar)')
        plt.title(figure_title)


def __save_emission_spectrum(filename, atmosphere, plot_figure=False, figure_title=None, prt_version=version):
    wavelength = np.asarray(petitRADTRANS.nat_cst.c / atmosphere.freq * 1e4)

    np.savez_compressed(
        os.path.join(filename),
        wavelength=wavelength,
        spectral_radiosity=np.asarray(atmosphere.flux),
        header=f'File generated by tests.utils function\n'
               f'wavelength units: um\n'
               f'spectral radiosity units: erg.cm-2.s-1.Hz-1',
        prt_version=f'{prt_version}'
    )

    if plot_figure:
        plt.figure()
        plt.semilogx(wavelength, atmosphere.flux)
        plt.xlabel(r'Wavelength ($\mu$m)')
        plt.ylabel(r'Spectral radiosity (erg$\cdot$s$^{-1}\cdot$cm$^{-2}\cdot$Hz$^{-1}$)')
        plt.title(figure_title)


def __save_temperature_profile(filename, temperature, plot_figure=False, figure_title=None, prt_version=version):
    np.savez_compressed(
        os.path.join(filename),
        temperature=np.asarray(temperature),
        pressure=np.asarray(radtrans_parameters['pressures']),
        header=f'File generated by tests.utils function\n'
               f'temperature units: K\n'
               f'pressure units: bar',
        prt_version=f'{prt_version}'
    )

    if plot_figure:
        plt.figure()
        plt.semilogy(temperature, radtrans_parameters['pressures'])
        plt.ylim([1e2, 1e-6])
        plt.xlabel('Temperature (K)')
        plt.ylabel('Pressure (bar)')
        plt.title(figure_title)


def __save_transmission_spectrum(filename, atmosphere, plot_figure=False, figure_title=None, prt_version=version):
    wavelength = np.asarray(petitRADTRANS.nat_cst.c / atmosphere.freq * 1e4)
    transit_radius = np.asarray(atmosphere.transm_rad / petitRADTRANS.nat_cst.r_jup_mean)

    np.savez_compressed(
        os.path.join(filename),
        wavelength=wavelength,
        transit_radius=transit_radius,
        header=f'File generated by tests.utils.create_radtrans_correlated_k_transmission_spectrum_ref\n'
               f'wavelength units: um\n'
               f'transit_radius units: R_jup',
        prt_version=f'{prt_version}'
    )

    if plot_figure:
        plt.figure()
        plt.semilogx(wavelength, transit_radius)
        plt.xlabel(r'Wavelength ($\mu$m)')
        plt.ylabel(r'Transit radius (R$_{\rm{Jup}}$)')
        plt.title(figure_title)


# Data files generation functions
def create_guillot_2010_temperature_profile_ref(plot_figure=False):
    temperature_guillot = petitRADTRANS.nat_cst.guillot_global(
        pressure=radtrans_parameters['pressures'],
        kappa_ir=radtrans_parameters['temperature_guillot_2010_parameters']['kappa_ir'],
        gamma=radtrans_parameters['temperature_guillot_2010_parameters']['gamma'],
        grav=radtrans_parameters['planetary_parameters']['surface_gravity'],
        t_int=radtrans_parameters['temperature_guillot_2010_parameters']['intrinsic_temperature'],
        t_equ=radtrans_parameters['temperature_guillot_2010_parameters']['equilibrium_temperature']
    )

    __save_temperature_profile(
        reference_filenames['guillot_2010'], temperature_guillot, plot_figure, 'Guillot 2010 temperature profile'
    )


def create_radtrans_correlated_k_emission_spectrum_ref(plot_figure=False):
    from .test_radtrans_correlated_k import atmosphere_ck

    atmosphere_ck.calc_flux(
        temp=temperature_guillot_2010,
        abunds=radtrans_parameters['mass_fractions'],
        gravity=radtrans_parameters['planetary_parameters']['surface_gravity'],
        mmw=radtrans_parameters['mean_molar_mass'],
    )

    __save_emission_spectrum(
        reference_filenames['correlated_k_emission'], atmosphere_ck, plot_figure, 'Correlated-k emission spectrum'
    )


def create_radtrans_correlated_k_emission_spectrum_cloud_calculated_radius_ref(plot_figure=False):
    from .test_radtrans_correlated_k import atmosphere_ck

    mass_fractions = copy.deepcopy(radtrans_parameters['mass_fractions'])
    mass_fractions['Mg2SiO4(c)'] = \
        radtrans_parameters['cloud_parameters']['cloud_species']['Mg2SiO4(c)_cd']['mass_fraction']

    atmosphere_ck.calc_flux(
        temp=temperature_guillot_2010,
        abunds=mass_fractions,
        gravity=radtrans_parameters['planetary_parameters']['surface_gravity'],
        mmw=radtrans_parameters['mean_molar_mass'],
        Kzz=radtrans_parameters['planetary_parameters']['eddy_diffusion_coefficient'],
        fsed=radtrans_parameters['cloud_parameters']['cloud_species']['Mg2SiO4(c)_cd']['f_sed'],
        sigma_lnorm=radtrans_parameters['cloud_parameters']['cloud_species']['Mg2SiO4(c)_cd']['sigma_log_normal'],
        contribution=True
    )

    __save_emission_spectrum(
        reference_filenames['correlated_k_emission_cloud_calculated_radius'], atmosphere_ck, plot_figure,
        'Correlated-k emission spectrum, with non-gray cloud using Hansen radius',
        prt_version=version
    )

    __save_contribution_function(
        reference_filenames['correlated_k_emission_contribution_cloud_calculated_radius'],
        atmosphere_ck,
        mode='emission',
        plot_figure=plot_figure,
        figure_title='Correlated-k emission contribution function, '
                     'with non-gray cloud using calculated radius',
        prt_version=version
    )


def create_radtrans_correlated_k_emission_spectrum_cloud_calculated_radius_stellar_scattering_ref(plot_figure=False):
    from .test_radtrans_correlated_k_scattering import atmosphere_ck_scattering

    mass_fractions = copy.deepcopy(radtrans_parameters['mass_fractions'])
    mass_fractions['Mg2SiO4(c)'] = \
        radtrans_parameters['cloud_parameters']['cloud_species']['Mg2SiO4(c)_cd']['mass_fraction']

    geometries = [
        'planetary_ave',
        'dayside_ave',
        'non-isotropic'
    ]

    for geometry in geometries:
        atmosphere_ck_scattering.calc_flux(
            temp=temperature_guillot_2010,
            abunds=mass_fractions,
            gravity=radtrans_parameters['planetary_parameters']['surface_gravity'],
            mmw=radtrans_parameters['mean_molar_mass'],
            Kzz=radtrans_parameters['planetary_parameters']['eddy_diffusion_coefficient'],
            fsed=radtrans_parameters['cloud_parameters']['cloud_species']['Mg2SiO4(c)_cd']['f_sed'],
            sigma_lnorm=radtrans_parameters['cloud_parameters']['cloud_species']['Mg2SiO4(c)_cd']['sigma_log_normal'],
            geometry=geometry,
            Tstar=radtrans_parameters['stellar_parameters']['effective_temperature'],
            Rstar=radtrans_parameters['stellar_parameters']['radius'] * petitRADTRANS.nat_cst.r_sun,
            semimajoraxis=radtrans_parameters['planetary_parameters']['orbit_semi_major_axis'],
            theta_star=radtrans_parameters['stellar_parameters']['incidence_angle']
        )

        __save_emission_spectrum(
            reference_filenames[f'correlated_k_emission_cloud_calculated_radius_scattering_{geometry}'],
            atmosphere_ck_scattering, plot_figure,
            f'Correlated-k transmission spectrum, '
            f'with non-gray cloud using calculated radius and scattering ({geometry})',
            prt_version=version
        )


def create_radtrans_correlated_k_emission_spectrum_cloud_hansen_radius_ref(plot_figure=False):
    from .test_radtrans_correlated_k import atmosphere_ck

    mass_fractions = copy.deepcopy(radtrans_parameters['mass_fractions'])
    mass_fractions['Mg2SiO4(c)'] = \
        radtrans_parameters['cloud_parameters']['cloud_species']['Mg2SiO4(c)_cd']['mass_fraction']

    atmosphere_ck.calc_flux(
        temp=temperature_guillot_2010,
        abunds=mass_fractions,
        gravity=radtrans_parameters['planetary_parameters']['surface_gravity'],
        mmw=radtrans_parameters['mean_molar_mass'],
        Kzz=radtrans_parameters['planetary_parameters']['eddy_diffusion_coefficient'],
        fsed=radtrans_parameters['cloud_parameters']['cloud_species']['Mg2SiO4(c)_cd']['f_sed'],
        b_hans=radtrans_parameters['cloud_parameters']['cloud_species']['Mg2SiO4(c)_cd']['b_hansen'],
        dist='hansen'
    )

    __save_emission_spectrum(
        reference_filenames['correlated_k_emission_cloud_hansen_radius'], atmosphere_ck, plot_figure,
        'Correlated-k emission spectrum, with non-gray cloud using Hansen radius',
        prt_version=petitRADTRANS.version.version
    )


def create_radtrans_correlated_k_emission_spectrum_cloud_calculated_radius_scattering_ref(plot_figure=False):
    from .test_radtrans_correlated_k_scattering import atmosphere_ck_scattering

    mass_fractions = copy.deepcopy(radtrans_parameters['mass_fractions'])
    mass_fractions['Mg2SiO4(c)'] = \
        radtrans_parameters['cloud_parameters']['cloud_species']['Mg2SiO4(c)_cd']['mass_fraction']

    atmosphere_ck_scattering.calc_flux(
        temp=temperature_guillot_2010,
        abunds=mass_fractions,
        gravity=radtrans_parameters['planetary_parameters']['surface_gravity'],
        mmw=radtrans_parameters['mean_molar_mass'],
        Kzz=radtrans_parameters['planetary_parameters']['eddy_diffusion_coefficient'],
        fsed=radtrans_parameters['cloud_parameters']['cloud_species']['Mg2SiO4(c)_cd']['f_sed'],
        sigma_lnorm=radtrans_parameters['cloud_parameters']['cloud_species']['Mg2SiO4(c)_cd']['sigma_log_normal'],
        add_cloud_scat_as_abs=True
    )

    __save_emission_spectrum(
        reference_filenames['correlated_k_emission_cloud_calculated_radius_scattering'],
        atmosphere_ck_scattering,
        plot_figure,
        'Correlated-k emission spectrum, with non-gray cloud using calculated radius and scattering',
        prt_version=version
    )


def create_radtrans_correlated_k_emission_spectrum_surface_scattering_ref(plot_figure=False):
    from .test_radtrans_correlated_k_surface_scattering import atmosphere_ck_surface_scattering

    # Copy atmosphere so that change in reflectance is not carried outside the function
    atmosphere = copy.deepcopy(atmosphere_ck_surface_scattering)

    atmosphere.reflectance = radtrans_parameters['planetary_parameters']['surface_reflectance'] * \
        np.ones_like(atmosphere.freq)

    atmosphere.calc_flux(
        temp=temperature_guillot_2010,
        abunds=radtrans_parameters['mass_fractions'],
        gravity=radtrans_parameters['planetary_parameters']['surface_gravity'],
        mmw=radtrans_parameters['mean_molar_mass'],
        geometry='non-isotropic',
        Tstar=radtrans_parameters['stellar_parameters']['effective_temperature'],
        Rstar=radtrans_parameters['stellar_parameters']['radius'] * petitRADTRANS.nat_cst.r_sun,
        semimajoraxis=radtrans_parameters['planetary_parameters']['orbit_semi_major_axis'],
        theta_star=radtrans_parameters['stellar_parameters']['incidence_angle']
    )

    __save_emission_spectrum(
        reference_filenames['correlated_k_emission_surface_scattering'],
        atmosphere, plot_figure, 'Correlated-k emission spectrum with surface scattering'
    )


def create_radtrans_correlated_k_transmission_spectrum_cloud_calculated_radius_scattering_ref(plot_figure=False):
    from .test_radtrans_correlated_k_scattering import atmosphere_ck_scattering

    mass_fractions = copy.deepcopy(radtrans_parameters['mass_fractions'])
    mass_fractions['Mg2SiO4(c)'] = \
        radtrans_parameters['cloud_parameters']['cloud_species']['Mg2SiO4(c)_cd']['mass_fraction']

    atmosphere_ck_scattering.calc_transm(
        temp=radtrans_parameters['temperature_isothermal'] * np.ones_like(radtrans_parameters['pressures']),
        abunds=mass_fractions,
        gravity=radtrans_parameters['planetary_parameters']['surface_gravity'],
        mmw=radtrans_parameters['mean_molar_mass'],
        R_pl=radtrans_parameters['planetary_parameters']['radius'] * petitRADTRANS.nat_cst.r_jup_mean,
        P0_bar=radtrans_parameters['planetary_parameters']['reference_pressure'],
        Kzz=radtrans_parameters['planetary_parameters']['eddy_diffusion_coefficient'],
        fsed=radtrans_parameters['cloud_parameters']['cloud_species']['Mg2SiO4(c)_cd']['f_sed'],
        sigma_lnorm=radtrans_parameters['cloud_parameters']['cloud_species']['Mg2SiO4(c)_cd']['sigma_log_normal']
    )

    __save_transmission_spectrum(
        reference_filenames['correlated_k_transmission_cloud_calculated_radius_scattering'],
        atmosphere_ck_scattering,
        plot_figure,
        'Correlated-k transmission spectrum, with non-gray cloud using calculated radius and scattering',
        prt_version=version
    )


def create_radtrans_correlated_k_transmission_spectrum_ref(plot_figure=False):
    from .test_radtrans_correlated_k import atmosphere_ck

    atmosphere_ck.calc_transm(
        temp=radtrans_parameters['temperature_isothermal'] * np.ones_like(radtrans_parameters['pressures']),
        abunds=radtrans_parameters['mass_fractions'],
        gravity=radtrans_parameters['planetary_parameters']['surface_gravity'],
        mmw=radtrans_parameters['mean_molar_mass'],
        R_pl=radtrans_parameters['planetary_parameters']['radius'] * petitRADTRANS.nat_cst.r_jup_mean,
        P0_bar=radtrans_parameters['planetary_parameters']['reference_pressure']
    )

    __save_transmission_spectrum(
        reference_filenames['correlated_k_transmission'], atmosphere_ck, plot_figure,
        'Correlated-k transmission spectrum'
    )


def create_radtrans_correlated_k_transmission_spectrum_cloud_power_law_ref(plot_figure=False):
    from .test_radtrans_correlated_k import atmosphere_ck

    atmosphere_ck.calc_transm(
        temp=radtrans_parameters['temperature_isothermal'] * np.ones_like(radtrans_parameters['pressures']),
        abunds=radtrans_parameters['mass_fractions'],
        gravity=radtrans_parameters['planetary_parameters']['surface_gravity'],
        mmw=radtrans_parameters['mean_molar_mass'],
        R_pl=radtrans_parameters['planetary_parameters']['radius'] * petitRADTRANS.nat_cst.r_jup_mean,
        P0_bar=radtrans_parameters['planetary_parameters']['reference_pressure'],
        kappa_zero=radtrans_parameters['cloud_parameters']['kappa_zero'],
        gamma_scat=radtrans_parameters['cloud_parameters']['gamma_scattering']
    )

    __save_transmission_spectrum(
        reference_filenames['correlated_k_transmission_cloud_power_law'],
        atmosphere_ck, plot_figure, 'Correlated-k transmission spectrum, with power law cloud'
    )


def create_radtrans_correlated_k_transmission_spectrum_gray_cloud_ref(plot_figure=False):
    from .test_radtrans_correlated_k import atmosphere_ck

    atmosphere_ck.calc_transm(
        temp=radtrans_parameters['temperature_isothermal'] * np.ones_like(radtrans_parameters['pressures']),
        abunds=radtrans_parameters['mass_fractions'],
        gravity=radtrans_parameters['planetary_parameters']['surface_gravity'],
        mmw=radtrans_parameters['mean_molar_mass'],
        R_pl=radtrans_parameters['planetary_parameters']['radius'] * petitRADTRANS.nat_cst.r_jup_mean,
        P0_bar=radtrans_parameters['planetary_parameters']['reference_pressure'],
        Pcloud=radtrans_parameters['cloud_parameters']['cloud_pressure']
    )

    __save_transmission_spectrum(
        reference_filenames['correlated_k_transmission_gray_cloud'],
        atmosphere_ck, plot_figure, 'Correlated-k transmission spectrum, with gray cloud'
    )


def create_radtrans_correlated_k_transmission_spectrum_rayleigh_ref(plot_figure=False):
    from .test_radtrans_correlated_k import atmosphere_ck

    atmosphere_ck.calc_transm(
        temp=radtrans_parameters['temperature_isothermal'] * np.ones_like(radtrans_parameters['pressures']),
        abunds=radtrans_parameters['mass_fractions'],
        gravity=radtrans_parameters['planetary_parameters']['surface_gravity'],
        mmw=radtrans_parameters['mean_molar_mass'],
        R_pl=radtrans_parameters['planetary_parameters']['radius'] * petitRADTRANS.nat_cst.r_jup_mean,
        P0_bar=radtrans_parameters['planetary_parameters']['reference_pressure'],
        haze_factor=radtrans_parameters['cloud_parameters']['haze_factor']
    )

    __save_transmission_spectrum(
        reference_filenames['correlated_k_transmission_rayleigh'],
        atmosphere_ck, plot_figure, 'Correlated-k transmission spectrum, with hazes'
    )


def create_radtrans_correlated_k_transmission_spectrum_cloud_fixed_radius_ref(plot_figure=False):
    from .test_radtrans_correlated_k import atmosphere_ck

    mass_fractions = copy.deepcopy(radtrans_parameters['mass_fractions'])
    mass_fractions['Mg2SiO4(c)'] = \
        radtrans_parameters['cloud_parameters']['cloud_species']['Mg2SiO4(c)_cd']['mass_fraction']

    atmosphere_ck.calc_transm(
        temp=radtrans_parameters['temperature_isothermal'] * np.ones_like(radtrans_parameters['pressures']),
        abunds=mass_fractions,
        gravity=radtrans_parameters['planetary_parameters']['surface_gravity'],
        mmw=radtrans_parameters['mean_molar_mass'],
        R_pl=radtrans_parameters['planetary_parameters']['radius'] * petitRADTRANS.nat_cst.r_jup_mean,
        P0_bar=radtrans_parameters['planetary_parameters']['reference_pressure'],
        radius={'Mg2SiO4(c)': radtrans_parameters['cloud_parameters']['cloud_species']['Mg2SiO4(c)_cd']['radius']},
        sigma_lnorm=radtrans_parameters['cloud_parameters']['cloud_species']['Mg2SiO4(c)_cd']['sigma_log_normal']
    )

    __save_transmission_spectrum(
        reference_filenames['correlated_k_transmission_cloud_fixed_radius'], atmosphere_ck, plot_figure,
        'Correlated-k transmission spectrum, with non-gray cloud using fixed radius'
    )


def create_radtrans_correlated_k_transmission_spectrum_cloud_calculated_radius_ref(plot_figure=False):
    from .test_radtrans_correlated_k import atmosphere_ck

    mass_fractions = copy.deepcopy(radtrans_parameters['mass_fractions'])
    mass_fractions['Mg2SiO4(c)'] = \
        radtrans_parameters['cloud_parameters']['cloud_species']['Mg2SiO4(c)_cd']['mass_fraction']

    atmosphere_ck.calc_transm(
        temp=radtrans_parameters['temperature_isothermal'] * np.ones_like(radtrans_parameters['pressures']),
        abunds=mass_fractions,
        gravity=radtrans_parameters['planetary_parameters']['surface_gravity'],
        mmw=radtrans_parameters['mean_molar_mass'],
        R_pl=radtrans_parameters['planetary_parameters']['radius'] * petitRADTRANS.nat_cst.r_jup_mean,
        P0_bar=radtrans_parameters['planetary_parameters']['reference_pressure'],
        Kzz=radtrans_parameters['planetary_parameters']['eddy_diffusion_coefficient'],
        fsed=radtrans_parameters['cloud_parameters']['cloud_species']['Mg2SiO4(c)_cd']['f_sed'],
        sigma_lnorm=radtrans_parameters['cloud_parameters']['cloud_species']['Mg2SiO4(c)_cd']['sigma_log_normal'],
        contribution=True
    )

    __save_transmission_spectrum(
        reference_filenames['correlated_k_transmission_cloud_calculated_radius'], atmosphere_ck, plot_figure,
        'Correlated-k transmission spectrum, with non-gray cloud using calculated radius'
    )

    __save_contribution_function(
        reference_filenames['correlated_k_transmission_contribution_cloud_calculated_radius'],
        atmosphere_ck,
        mode='transmission',
        plot_figure=plot_figure,
        figure_title='Correlated-k transmission contribution function, '
                     'with non-gray cloud using calculated radius',
        prt_version=version
    )


def create_radtrans_line_by_line_emission_spectrum_ref(plot_figure=False):
    from .test_radtrans_line_by_line import atmosphere_lbl

    atmosphere_lbl.calc_flux(
        temp=temperature_guillot_2010,
        abunds=radtrans_parameters['mass_fractions'],
        gravity=radtrans_parameters['planetary_parameters']['surface_gravity'],
        mmw=radtrans_parameters['mean_molar_mass'],
    )

    __save_emission_spectrum(
        reference_filenames['line_by_line_emission'],
        atmosphere_lbl, plot_figure, 'Line-by-line emission spectrum'
    )


def create_radtrans_line_by_line_transmission_spectrum_ref(plot_figure=False):
    from .test_radtrans_line_by_line import atmosphere_lbl

    atmosphere_lbl.calc_transm(
        temp=radtrans_parameters['temperature_isothermal'] * np.ones_like(radtrans_parameters['pressures']),
        abunds=radtrans_parameters['mass_fractions'],
        gravity=radtrans_parameters['planetary_parameters']['surface_gravity'],
        mmw=radtrans_parameters['mean_molar_mass'],
        R_pl=radtrans_parameters['planetary_parameters']['radius'] * petitRADTRANS.nat_cst.r_jup_mean,
        P0_bar=radtrans_parameters['planetary_parameters']['reference_pressure']
    )

    __save_transmission_spectrum(
        reference_filenames['line_by_line_transmission'],
        atmosphere_lbl, plot_figure, 'Line-by-line transmission spectrum'
    )


def create_all_comparison_files(plot_figure=False):
    create_guillot_2010_temperature_profile_ref(plot_figure)
    create_radtrans_correlated_k_emission_spectrum_ref(plot_figure)
    create_radtrans_correlated_k_emission_spectrum_cloud_calculated_radius_ref(plot_figure)
    create_radtrans_correlated_k_emission_spectrum_cloud_calculated_radius_scattering_ref(plot_figure)
    create_radtrans_correlated_k_emission_spectrum_cloud_calculated_radius_stellar_scattering_ref(plot_figure)
    create_radtrans_correlated_k_emission_spectrum_cloud_hansen_radius_ref(plot_figure)
    create_radtrans_correlated_k_emission_spectrum_surface_scattering_ref(plot_figure)
    create_radtrans_correlated_k_transmission_spectrum_ref(plot_figure)
    create_radtrans_correlated_k_transmission_spectrum_cloud_power_law_ref(plot_figure)
    create_radtrans_correlated_k_transmission_spectrum_rayleigh_ref(plot_figure)
    create_radtrans_correlated_k_transmission_spectrum_gray_cloud_ref(plot_figure)
    create_radtrans_correlated_k_transmission_spectrum_cloud_fixed_radius_ref(plot_figure)
    create_radtrans_correlated_k_transmission_spectrum_cloud_calculated_radius_ref(plot_figure)
    create_radtrans_correlated_k_transmission_spectrum_cloud_calculated_radius_scattering_ref(plot_figure)
    create_radtrans_line_by_line_emission_spectrum_ref(plot_figure)
    create_radtrans_line_by_line_transmission_spectrum_ref(plot_figure)
